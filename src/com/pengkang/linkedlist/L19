/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        //find the node before deleted one;
        ListNode start = new ListNode(0);
        ListNode slow = start, fast = start;
        slow.next = head;
        // ListNode fast = head;
        // ListNode slow = head;
        for(int i = 1; i<= n+1; i++){
            fast = fast.next;
        }
        //now the gap is n+1;
        while(fast != null){
            // fast = fast.next;
            slow = slow.next;
            fast = fast.next;
            
        }
        // now ,fast == null, slow is point the node before deleted one;
        slow.next = slow.next.next;
        // return head;
        return start.next;
        
    }
}